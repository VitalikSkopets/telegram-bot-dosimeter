[tool.poetry]
name = "dosimeter"
version = "0.1.0"
description = "This bot can inform the user about the current state of the radiation encounter in Belarus and about the power level of the equivalent concentration-concentration recorded in the radiation monitoring network of the Ministry of Natural Resources and Environmental Protection of Belarus. Source: ©rad.org.by Designed by: ©itrexgroup.com"
license = "MIT"
authors = ["Vitaly Skopets <vitaly.skopets@gitrexgroup.com>"]
readme = "README.md"
homepage = "https://gitlab.itrexgroup.com/vitaly.skopets/telegram-bot-desimeter"
repository = "https://gitlab.itrexgroup.com/vitaly.skopets/telegram-bot-desimeter"

[tool.poetry.dependencies]
python = "^3.10"
pymongo = {extras = ["snappy", "gssapi", "srv", "tls"], version = "^4.2.0"}
pytz = "^2022.1"
mtranslate = "^1.8"
python-telegram-bot = "^13.13"
fake-useragent = "^1.1.0"
requests = "^2.28.1"
urllib3 = "^1.26.10"
bs4 = "^0.0.1"
emoji = "^1.7.0"
python-json-logger = "^2.0.4"
geopy = "^2.2.0"
types-emoji = "^1.7.4"
types-pytz = "^2022.1.2"
types-requests = "^2.28.2"
sentry-sdk = "^1.7.2"
lxml = "^4.9.2"
cryptography = "^39.0.0"
jinja2 = "^3.1.2"
pydantic = "^1.10.7"

[tool.poetry.scripts]
poetry = 'poetry.console:run'
main-run = 'dosimeter.main:main'

[tool.poetry.group.dev.dependencies]
pytest = "^7.1.2"
pre-commit = "^2.19.0"
black = "^22.6.0"
isort = "^5.10.1"
mypy = "^0.961"
ruff = "^0.0.239"
pytest-cov = "^4.0"
pytest-xdist = "^2.5.0"
pytest-randomly = "^3.12.0"
mimesis = "^8.0.0"
yamllint = "^1.30.0"
httpretty = "^1.1.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.pip-cache
  | \.poetry
  | \.venv
  | \.vscode
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
skip = ".pytest_cache,.pip-cache,.mypy_cache,.poetry,venv,.venv"
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true

[tool.ruff]
select = ["E", "W", "C4", "T10", "F", "Q", "C4", "T20", "TID"]
ignore = [
    "E501",  # covered by black
    "E999",
    "TID252",  # covered by isort
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".pytest_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

line-length = 88
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py310"

[tool.ruff.mccabe]
max-complexity = 10

[tool.coverage.run]
source = [
    "dosimeter/*",
]
branch = true
omit = [
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain about some magic methods:
    "def __str__",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    # Don't complain about empty realizations
    "pass",
    # Don't complain about abstract methods
    "@abc.abstractmethod"
]
ignore_errors = true
precision = 2

[tool.coverage.html]
directory = "coverage"
